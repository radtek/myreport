using System;
using Nancy;
using Topshelf.Logging;
using System.IO;
using System.Collections.Generic;
using PMS.Libraries.ToolControls.PMSPublicInfo;
using System.Dynamic;
using Newtonsoft.Json;
using System.ComponentModel;
using System.Linq;
using System.Security.Cryptography;
using Newtonsoft.Json.Converters;

namespace NetSCADA.MESReportServer
{
	public class RptManageModule:NancyModule
	{
		LogWriter log = HostLogger.Get ("RptManageModule");

		public RptManageModule ()
		{
			CurrentPrjInfo.CurrentEnvironment = MESEnvironment.MESReportServer;
			ProjectPathClass.ProjectPath = AppDomain.CurrentDomain.BaseDirectory;
			Post ["/dirs"] = _ => {
				try {
					if (this.Request.Body.Length <= 0) {
						return string.Empty;
					}

					byte[] bs = new byte[this.Request.Body.Length];
					this.Request.Body.Read (bs, 0, bs.Length);
					var json = System.Text.Encoding.Default.GetString (bs);
					var obj = JsonConvert.DeserializeObject < Dictionary<string,string>> (json);
					if (obj == null) {
						string str = GetResult (1, "请求参数为空");
						return this.Response.AsText (str);
					}
					var id = string.Empty;
					var dirName = string.Empty;
					var parent = string.Empty;
					var flag = string.Empty;
					obj.TryGetValue ("id", out id);
					obj.TryGetValue ("name", out dirName);
					obj.TryGetValue ("parent", out parent);
					obj.TryGetValue ("flag", out flag);
					log.InfoFormat ("/dirs--id:{0},name:{1},parent:{2},flag:{3}", id, dirName, parent, flag);
					parent = parent.Replace ('$', Path.DirectorySeparatorChar);

					var dirPath = Path.Combine (parent, dirName);

					if (flag == null) {
						string str = GetResult (1, "请求标志flag为空");
						return this.Response.AsText (str);
					}

					List<dynamic> files = null;
					dynamic res = new ExpandoObject ();
					if (flag == "0") {//string isDir = this.Request.Query.isdir;
						string dir = string.Empty;
						//log.InfoFormat ("dirs-json:{0}", json);
						if (dirPath == null || string.IsNullOrEmpty (dirPath) || string.IsNullOrWhiteSpace (dirPath) || dirPath == "$") {
							dir = ProjectPathClass.UserCustomPath;
						} else {
							dir = Path.Combine (ProjectPathClass.UserCustomPath, dirName.TrimStart (Path.DirectorySeparatorChar));
							if (dirName == "/")
								dir = ProjectPathClass.UserCustomPath;
						}
						files = GetDirs (dir);
					
						var dbDirs = RptDb.GetAllRptDirectory ();
						foreach (var d in files) {
							var dbdir = dbDirs.FirstOrDefault (dd => {
								//var dPath = Path.Combine (ProjectPathClass.UserCustomPath, dd.DirPath.TrimStart (Path.DirectorySeparatorChar));
								System.Diagnostics.Debug.WriteLine ("==dPath:{0},d.path:{1},DirName:{2},d.Name:{3}", dd.DirPath, d.Path, dd.DirName, d.Name);
								return dd.DirName == d.Name && dd.DirPath == d.Path;
							});
							if (dbdir != null) {
								d.Id = dbdir.Id;
							}
						}
						res.list = files;
					} else if (flag == "1") { // 设计时
						if (string.IsNullOrEmpty (id)) {
							string str = GetResult (1, "请求文件id为空");
							return this.Response.AsText (str);
						}
						var list = RptDb.GetRptDesignByDirId (id);
						res.list = list;
					} else if (flag == "2") { // 运行时
						if (string.IsNullOrEmpty (id)) {
							string str = GetResult (1, "请求文件id为空");
							return this.Response.AsText (str);
						}
						var list = RptDb.GetRptRuntimeByDirId (id);
						res.list = list;
					}
						
					string result = GetResult (0, res);
					return this.Response.AsText (result);
				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}

			};

//			Get ["/rptruntime/dirid"] = _ => {
//
//			};
//
//			Get ["/rptdesign/dirid"] = _ => {
//				
//			};

			Post ["/rptdesign/del"] = _ => {
				try {
					if (this.Request.Body.Length <= 0) {
						return string.Empty;
					}

					byte[] bs = new byte[this.Request.Body.Length];
					this.Request.Body.Read (bs, 0, bs.Length);
					var json = System.Text.Encoding.Default.GetString (bs);
					var obj = JsonConvert.DeserializeObject <Dictionary<string,List<string>>> (json);
					if (obj == null) {
						string str = GetResult (1, "请求参数为空");
						return this.Response.AsText (str);
					}
					List<string> ids = null;
					if (!obj.TryGetValue ("ids", out ids)) {
						string str = GetResult (1, "没有要删除的rptid.");
						return this.Response.AsText (str); 
					}
					var designs = RptDb.GetRptDesignByIds (ids);
					var flag = RptDb.DeleteRptDesign (ids);
					if (flag == true) {
						foreach (var design in designs) {
							var dir = RptDb.GetRptDirectoryById (design.DirId);
							if (dir == null) {
								continue;
							}
							var file = Path.Combine (ProjectPathClass.UserCustomPath, dir.DirPath.TrimStart (Path.DirectorySeparatorChar), string.Format ("{0}.rpt", design.RptName));
							if (File.Exists (file)) {
								File.Delete (file);
							}	
						}
						string str = GetResult (0, "删除成功");
						return this.Response.AsText (str); 
					} else {
						string str = GetResult (1, "删除失败");
						return this.Response.AsText (str); 
					}

				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}
			};

			Post ["/dir/create"] = _ => {
				try {
					if (this.Request.Body.Length <= 0) {
						return string.Empty;
					}

					byte[] bs = new byte[this.Request.Body.Length];
					this.Request.Body.Read (bs, 0, bs.Length);
					var json = System.Text.Encoding.Default.GetString (bs);
					var obj = JsonConvert.DeserializeObject <Dictionary<string,string>> (json);
					if (obj == null) {
						string str = GetResult (1, "请求参数为空");
						return this.Response.AsText (str);
					}
					var dir = new RptDirectory ();
					//dir.Id = Guid.NewGuid ().ToString ("N");
					var name = string.Empty;
					if (obj.TryGetValue ("name", out name)) {
						dir.DirName = name;
					}
					//dir.DirName = obj ["name"];
					var parent = string.Empty;
					obj.TryGetValue ("parent", out parent);
					parent = parent.Replace ('$', Path.DirectorySeparatorChar);
					dir.DirPath = Path.Combine (parent, dir.DirName);
					string user = string.Empty;
					if (obj.TryGetValue ("user", out user)) {
						dir.LastModifyUser = user;
					}
					//dir.LastModifyUser = obj ["user"];
					var dirPath = Path.Combine (ProjectPathClass.UserCustomPath, dir.DirPath.TrimStart (Path.DirectorySeparatorChar));
					var flag = RptDb.SaveDir (dir);
					dynamic res = new ExpandoObject ();
					if (flag == true) {
						
						if (Directory.Exists (dirPath)) {
							Directory.Delete (dirPath);
						}
						Directory.CreateDirectory (dirPath);
						res.id = dir.Id;
						res.msg = "创建成功";
						string str = GetResult (0, res);
						return this.Response.AsText (str); 
					} else {
						res.id = string.Empty;
						res.msg = "创建失败";
						if (Directory.Exists (dirPath)) {
							Directory.Delete (dirPath);
						}
						string str = GetResult (1, res);
						return this.Response.AsText (str); 
					}
				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}
			};

			Post ["/dir/edit"] = _ => {
				try {
					if (this.Request.Body.Length <= 0) {
						return string.Empty;
					}

					byte[] bs = new byte[this.Request.Body.Length];
					this.Request.Body.Read (bs, 0, bs.Length);
					var json = System.Text.Encoding.Default.GetString (bs);
					var obj = JsonConvert.DeserializeObject <Dictionary<string,string>> (json);
					if (obj == null) {
						string str = GetResult (1, "请求参数为空");
						return this.Response.AsText (str);
					}
					var dir = new RptDirectory ();
					string id = string.Empty;
					if (obj.TryGetValue ("id", out id)) {
						dir.Id = id;
					}
					string name = string.Empty;
					if (obj.TryGetValue ("name", out name)) {
						dir.DirName	= name;
					}
					var parent = string.Empty;
					obj.TryGetValue ("parent", out parent);
					parent = parent.Replace ('$', Path.DirectorySeparatorChar);
					dir.DirPath = Path.Combine (parent, dir.DirName);
					string user = string.Empty;
					if (obj.TryGetValue ("user", out user)) {
						dir.LastModifyUser = user;
					}
					var rptDir = RptDb.GetRptDirectoryById (dir.Id);
					if (rptDir == null) {
						string str = GetResult (1, "没有");
						return this.Response.AsText (str); 
					}
					var tempDirPath = dir.DirPath;
					var flag = RptDb.SaveDir (dir);
					if (flag == true) {
						var dirPath = Path.Combine (ProjectPathClass.UserCustomPath, rptDir.DirPath.TrimStart (Path.DirectorySeparatorChar));
						var targetPath = Path.Combine (ProjectPathClass.UserCustomPath, tempDirPath.TrimStart (Path.DirectorySeparatorChar));
						if (Directory.Exists (dirPath)) {
							Directory.Move (dirPath, targetPath);
						} 
						string str = GetResult (0, "修改成功");
						return this.Response.AsText (str); 
					} else {
						string str = GetResult (1, "修改失败");
						return this.Response.AsText (str); 
					}
				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}
			};

			Post ["/dir/del"] = _ => {
				try {
					if (this.Request.Body.Length <= 0) {
						return string.Empty;
					}

					byte[] bs = new byte[this.Request.Body.Length];
					this.Request.Body.Read (bs, 0, bs.Length);
					var json = System.Text.Encoding.Default.GetString (bs);
					var obj = JsonConvert.DeserializeObject <Dictionary<string,string>> (json);
					if (obj == null) {
						string str = GetResult (1, "请求参数为空");
						return this.Response.AsText (str); 
					}
					string id = string.Empty;
					if (!obj.TryGetValue ("id", out id)) {
						string str = GetResult (1, "要删除的文件夹id为空");
						return this.Response.AsText (str); 
					}
	
					var dir = RptDb.GetRptDirectoryById (id);
					if (dir == null) {
						string str = GetResult (1, "没有要删除的文件夹");
						return this.Response.AsText (str); 
					}
					dir.DirPath = dir.DirPath.Replace ('$', Path.DirectorySeparatorChar);
					var flag = RptDb.DeleteRptDirectory (dir);
					if (flag == true) {
						var dirPath = Path.Combine (ProjectPathClass.UserCustomPath, dir.DirPath.TrimStart (Path.DirectorySeparatorChar));
						if (Directory.Exists (dirPath)) {
							Directory.Delete (dirPath, true);
						} 
						string str = GetResult (0, "删除成功");
						return this.Response.AsText (str); 
					} else {
						string str = GetResult (1, "删除失败");
						return this.Response.AsText (str); 
					}
				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}
			};

			Post ["/upload"] = _ => {
				try {
					string user = this.Request.Form.user;
					string path = this.Request.Form.path;
					string dirId = this.Request.Form.dirId;
					if (string.IsNullOrEmpty (dirId)) {
						string str = GetResult (1, "文件夹Id为空");
						return this.Response.AsText (str); 
					}
					path = path.Replace ('$', Path.DirectorySeparatorChar);
					if (string.IsNullOrEmpty (path))
						path = ProjectPathClass.UserCustomPath;
					else
						path = Path.Combine (ProjectPathClass.UserCustomPath, path.TrimStart (Path.DirectorySeparatorChar));
					List<string> existsFiles = new List<string> ();		
					foreach (var file in this.Request.Files) {
						var filename = Path.Combine (path, file.Name);
						using (FileStream fileStream = new FileStream (filename, FileMode.Create)) {
							var design = new RptDesign () {
								RptName = Path.GetFileNameWithoutExtension (filename),
								UploadPerson = user,
								UploadTime = DateTime.Now.ToString ("yyyyMMddHHmmss"),
								DirId = dirId

							};
							if (RptDb.ExistsRptDesignByName (design.RptName)) {
								existsFiles.Add (file.Name);
								continue;
							}

							file.Value.CopyTo (fileStream);
							var flag = RptDb.SaveRptDesign (design);
							if (flag) {
								RptDb.SaveRptRuntime (new RptRuntime () {
									RptId = design.Id,
									QueryCount = 0,
									ExportCount = 0
								});
							}
						}
					}
					if (existsFiles.Count == 0) {
						string ss = GetResult (0, "上传成功");
						return this.Response.AsText (ss);
					} else {
						dynamic result = new ExpandoObject ();
						result.msg = "上传失败：要上传的文件在服务器上已经有同名文件，请修改后再上传";
						result.list = existsFiles;
						string ss = GetResult (1, result);
						return this.Response.AsText (ss);
					}
				} catch (Exception ex) {
					Message.Info (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
					string str = GetResult (1, ex.Message);
					return this.Response.AsText (str);
				}
			};
		}

		private List<dynamic> GetDirs (string dir = "")
		{
			var dirName = dir;// Path.Combine (ProjectPathClass.UserCustomPath, dir);
			if (!Directory.Exists (dir)) {
				//Directory.CreateDirectory (dirName);
				return null;
			}

			var list = new List<dynamic> ();

			var dirs = Directory.GetDirectories (dirName);
			foreach (var d in dirs) {
				var name = Path.GetFileName (d);
				dynamic rptPath = new ExpandoObject ();
				rptPath.Name = name;
				rptPath.Path = Path.Combine (Path.DirectorySeparatorChar.ToString (), d.Replace (ProjectPathClass.UserCustomPath, ""));
				var ds = Directory.GetDirectories (d);
				if (ds == null || ds.Length == 0)
					rptPath.HasChild = 0;
				else
					rptPath.HasChild = 1; // 有
				list.Add (rptPath);
			}

			return list;
		}

		private string GetResult (int code, object o)
		{
			dynamic result = new ExpandoObject ();
			result.code = code;
			result.data = o;
			return JsonConvert.SerializeObject (result);
		}
	}
}

