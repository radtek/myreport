using System;
using Topshelf.Logging;
using Dapper;
using Dapper.Contrib.Extensions;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;

namespace NetSCADA.MESReportServer
{
	public class RptDb
	{
		static LogWriter log = HostLogger.Get ("RptManageModule");

		public static bool SaveDir (RptDirectory dir)
		{
			try {
				if (dir == null)
					return false;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					if (string.IsNullOrEmpty (dir.Id)) {
						dir.Id = Guid.NewGuid ().ToString ("N");
						dir.LastModifyTime = dir.CreateTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
						var flag = conn.Insert (dir);
						return flag >= 0;
					} else {
						var d = conn.Get<RptDirectory> (dir.Id);
						if (d == null) {
							dir.Id = Guid.NewGuid ().ToString ("N");
							dir.LastModifyTime = dir.CreateTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
							var flag = conn.Insert (dir);
							return flag >= 0;
						} else {
							d.DirPath = dir.DirPath;
							d.DirName = dir.DirName;
							d.LastModifyUser = dir.LastModifyUser;
							d.LastModifyTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
							return conn.Update (d);
						}
					}
				}
				return false;
			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return false;
			}
		}

		public static bool SaveRptDesign (RptDesign rpt)
		{
			try {
				if (rpt == null)
					return false;
				var flag = 0L;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					if (string.IsNullOrEmpty (rpt.Id)) {
						rpt.Id = Guid.NewGuid ().ToString ("N");
						flag = conn.Insert (rpt);
						return flag >= 0;
					} else {
						var d = conn.Get<RptDesign> (rpt.Id);
						if (d == null) {
							rpt.Id = Guid.NewGuid ().ToString ("N");
							flag = conn.Insert (rpt);
							return flag >= 0;
						}
					}
				}

				return false;
			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return false;
			}
		}

		public static bool SaveRptRuntime (RptRuntime rpt)
		{
			try {
				if (rpt == null)
					return false;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					if (string.IsNullOrEmpty (rpt.Id)) {
						rpt.Id = Guid.NewGuid ().ToString ("N");
						rpt.LastQueryTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
						var flag = conn.Insert (rpt);
						return flag >= 0;
					} else {
						var d = conn.Get<RptRuntime> (rpt.Id);
						if (d == null) {
							rpt.Id = Guid.NewGuid ().ToString ("N");
							rpt.LastQueryTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
							var flag = conn.Insert (rpt);
							return flag >= 0;
						} else {
							d.ExportCount = rpt.ExportCount;
							d.LastQeuryPerson = rpt.LastQeuryPerson;
							d.QueryCount = d.QueryCount;
							d.LastQueryTime = DateTime.Now.ToString ("yyyyMMddHHmmss");
							return conn.Update (d);
						}
					}
				}

				return false;

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return false;
			}
		}

		public static List<RptRuntime> GetAllRptRuntime ()
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.GetAll<RptRuntime> ().AsList ();
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static List<RptRuntime> GetRptRuntimeByDirId (string dirId)
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.Query<RptRuntime> ("select * from rpt_runtime r where exists(select d.Id from rpt_design d where r.RptId=d.Id and d.DirId=@DirId)", new {DirId = dirId}).AsList ();
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static List<RptDesign> GetRptDesignByDirId (string dirId)
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.Query<RptDesign> ("select * from rpt_design where DirId=@DirId", new {DirId = dirId}).AsList ();
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static List<RptDesign> GetAllRptDesign ()
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.GetAll<RptDesign> ().AsList ();
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static List<RptDirectory> GetAllRptDirectory ()
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.GetAll<RptDirectory> ().AsList ();
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static RptDirectory GetRptDirectoryById (string id)
		{
			try {
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.Get<RptDirectory> (id);
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static List<RptDirectory> GetRptDirectoryByName (string name)
		{
			try {
				if (string.IsNullOrEmpty (name))
					return null;
				
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					return conn.Query<RptDirectory> ("select * from directory where dirpath=@Name", new {Name = name}).AsList ();

				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				return null;
			}
		}

		public static bool DeleteRptDirectory (RptDirectory dir)
		{
			IDbTransaction tran = null;
			try {
				if (dir == null || string.IsNullOrEmpty (dir.Id))
					return false;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					conn.Open ();
					tran = conn.BeginTransaction ();
					var flag = false;
					var list = conn.Query<RptDesign> ("select * from rpt_design where DirId=@DirId", new {DirId = dir.Id}, tran).AsList ();
					if (list == null || list.Count == 0) {
						flag = conn.Delete (dir, tran);
					} else {
						foreach (var rpt in list) {
							var result = conn.Execute ("delete from rpt_runtime where RptId=@RptId", new {RptId = rpt.Id}, tran);
							flag &= conn.Delete (rpt, tran);
							flag &= result > 0;
						}

						flag &= conn.Delete (dir, tran);
					}
					tran.Commit ();
					return flag;
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				if (tran != null) {
					tran.Rollback ();
				}
				return false;
			}
		}

		public static bool DeleteRptDesign (List<string> rptIds)
		{
			IDbTransaction tran = null;
			try {
				if (rptIds == null || rptIds.Count == 0)
					return false;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					conn.Open ();
					tran = conn.BeginTransaction ();
					var flag = false;
					foreach (var rpt in rptIds) {
						flag = conn.Delete (new RptDesign (){ Id = rpt });
						var result = conn.Execute ("delete from rpt_runtime where RptId=@RptId", new {RptId = rpt}, tran);
						flag &= result > 0;
					}

					tran.Commit ();
					return flag;
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				if (tran != null) {
					tran.Rollback ();
				}
				return false;
			}
		}

		public static bool DeleteRptRuntime (RptRuntime rpt)
		{
			IDbTransaction tran = null;
			try {
				if (rpt == null || string.IsNullOrEmpty (rpt.Id))
					return false;
				using (var conn = new MySqlConnection (CommonConst.ConStr)) {
					conn.Open ();
					tran = conn.BeginTransaction ();
					var flag = conn.Delete (rpt);
					var result = conn.Execute ("delete from rpt_design where Id=@Id", new {Id = rpt.RptId}, tran);
					flag &= result > 0;

					tran.Commit ();
					return flag;
				}

			} catch (Exception ex) {
				log.Error (string.Format ("message:{0},StackTrace:{1}", ex.Message, ex.StackTrace));
				if (tran != null) {
					tran.Rollback ();
				}
				return false;
			}
		}
	}
}

